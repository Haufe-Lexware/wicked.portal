#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const debug = require('debug')('portal:www');
const async = require('async');
const http = require('http');
const request = require('request');
const fs = require('fs');
const path = require('path');

//var envReader = require('portal-env');
const wicked = require('wicked-sdk');

const utils = require('../routes/utils');
const portalGlobals = require('../portalGlobals');

const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Wait for Portal API to be available
debug('Waiting for API to be available.');
app.initState = 'Waiting for API...';

const wickedOptions = {
    userAgentName: 'wicked.portal',
    userAgentVersion: utils.getVersion()
};

async.series([
    callback => wicked.initialize(wickedOptions, callback),
    callback => wicked.initMachineUser('portal', callback)
], function (err) {
    if (err) {
        console.error(err);
        throw Error('Could not retrieve globals from API! API not running?');
    }

    // TODO: This is the OAuth2 callback URL for the Portal:
    let callbackUrl = wicked.getExternalPortalUrl();
    if (!callbackUrl.endsWith('/'))
        callbackUrl = callbackUrl + '/';
    callbackUrl = callbackUrl + 'oauth2/callback';

    // TODO: Get from wicked instead
    // wicked.registerApplication('__portal', callbackUrl, function (err, clientCredentials) {
    //     ...
    // })

    const CLIENT_ID = "364efbef2ec0bf4e1ca61bfc2cbdb029ab3fee56";
    const CLIENT_SECRET = "c7d1c1b869142926e2c40e0d49c68c60be787e40";

    utils.setOAuth2Credentials(CLIENT_ID, CLIENT_SECRET);

    let apiUrl = wicked.getExternalApiUrl();
    if (!apiUrl.endsWith('/')) // Add trailing slash
        apiUrl = apiUrl + '/';
    apiUrl = apiUrl + 'api/v1';

    app.set('api_url', apiUrl);

    debug('API is responding. Finishing initialization.');
    app.initState = 'Finishing initialization...';

    portalGlobals.glob = wicked.getGlobals();

    app.portalGlobals = wicked.getGlobals();
    app.portalGlobals.buildDate = getBuildDate();

    app.initialize(function () {
        app.initialized = true;
        app.initState = 'Initialized';
    });
});

function getBuildDate() {
    debug('getBuildDate()');
    const buildDatePath = path.join(__dirname, '..', 'build_date');
    debug('Looking for build date file at: ' + buildDatePath);
    if (!fs.existsSync(buildDatePath))
        return "(no build date found)";
    return fs.readFileSync(buildDatePath, 'utf8');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
