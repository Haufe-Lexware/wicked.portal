#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const debug = require('debug')('portal:www');
const async = require('async');
const http = require('http');
const request = require('request');
const fs = require('fs');
const path = require('path');
const mustache = require('mustache');

//var envReader = require('portal-env');
const wicked = require('wicked-sdk');

const utils = require('../routes/utils');
const portalGlobals = require('../portalGlobals');

const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Wait for Portal API to be available
debug('Waiting for API to be available.');
app.initState = 'Waiting for API...';

const wickedOptions = {
    userAgentName: 'wicked.portal',
    userAgentVersion: utils.getVersion()
};

/**
 * Register the Portal UI as application __portal, with owner "internal:portal"
 * with the Portal API. This will give us client credentials which lets the Portal
 * authenticate and authorize with Kong to get access to the Portal API anonymously
 * or as an end user.
 * 
 * To do that, we use the wicked SDK; this is later not the case, as we're using the 
 * API as a regular client after that, i.e. need to go via Kong. The wicked SDK goes
 * directly to the backend end point inside the deployment, which is a no no later,
 * for security reasons.
 * 
 * @param callback 
 */

function registerApplicationAndSubscribe(callback) {
    debug('registerApplicationAndSubscribe()');
    let callbackUrl = wicked.getExternalPortalUrl();
    if (!callbackUrl.endsWith('/'))
        callbackUrl = callbackUrl + '/';
    callbackUrl = callbackUrl + 'login/callback';
    debug('callbackUrl: ' + callbackUrl);

    // Wicked SDK will automatically use the machine user (with admin access)
    async.waterfall([
        callback => {
            debug('GET applications/__portal');
            wicked.apiGet('applications/__portal', function (err, appInfo) {
                if (err && err.statusCode !== 404) {
                    return callback(err); // Hard error
                }
                debug('GET applications/__portal succeeded.');
                if (err && err.statusCode === 404) {
                    debug('GET applications/__portal returned 404.');
                    return callback(null, null); // App not present
                }
                debug('GET applications__portal returned application');
                return callback(null, appInfo);
            });
        },
        (appInfo, callback) => {
            debug('POST/PATCH applications/__portal');
            const appData = {
                id: '__portal',
                name: 'wicked.haufe.io Portal UI',
                redirectUri: callbackUrl,
                confidential: true
            };
            debug('Body: ' + JSON.stringify(appData));
            if (appInfo) {
                // App is already present
                wicked.apiPatch('applications/__portal', appData, callback);
            } else {
                wicked.apiPost('applications', appData, callback);
            }
        },
        (appInfo, callback) => {
            debug('GET subscription');
            wicked.apiGet('applications/__portal/subscriptions/portal-api', function (err, subsInfo) {
                debug('GET subscription returned...');
                if (err && err.statusCode !== 404) {
                    debug('... but failed.');
                    return callback(err);
                }

                if (err && err.statusCode === 404) {
                    debug('... but subscription returned 404');
                    return callback(null, null);
                }
                debug('... and succeeded.');
                debug('subsInfo: ' + JSON.stringify(subsInfo));
                return callback(null, subsInfo);
            });
        },
        // (subsInfo, callback) => {
        //     if (!subsInfo) {
        //         debug('Create subscription: Not yet present, nothing to do.');
        //         return callback(null);
        //     } else {
        //         debug('Deleting previously present subscription.');
        //         wicked.apiDelete('applications/__portal/subscriptions/portal-api', callback);
        //     }
        // },
        (subsInfo, callback) => {
            if (!subsInfo) {
                debug('Creating subscription.');
                const portalSubs = {
                    application: '__portal',
                    api: 'portal-api',
                    plan: '__internal_api_unlimited',
                    trusted: true
                };
                debug('POST applications/__portal/subscriptions...');
                wicked.apiPost('applications/__portal/subscriptions', portalSubs, function (err, subsInfo) {
                    if (err) {
                        debug('... but failed!');
                        return callback(err);
                    }
                    debug('... and succeeded!');
                    return callback(null, subsInfo);
                });
            } else {
                return callback(null, subsInfo);
            }
        }
    ], function (err, subscriptionInfo) {
        if (err) {
            console.error('ERROR: Could not register portal application and/or subscribe to the portal API');
            console.error(err);
            return callback(err);
        }
        //console.log(subscriptionInfo);
        debug('Subscription Info: ' + JSON.stringify(subscriptionInfo));

        const clientId = subscriptionInfo.clientId;
        const clientSecret = subscriptionInfo.clientSecret;

        if (!clientId || !clientSecret) {
            return callback(new Error('subscriptionInfo did not contain either clientId or clientSecret!'));
        }

        // Now we know our application and set the id and secret for later use.
        utils.setOAuth2Credentials(clientId, clientSecret);

        return callback(null, {
            clientId: clientId,
            clientSecret: clientSecret
        });
    });
}

/**
 * Find out which auth methods can be used for the portal; it's in the globals.json
 */
function configureAuthServer(callback) {
    debug('configureAuthServer()');
    // We already have access to the API, and the globals.
    const globals = wicked.getGlobals();
    if (!globals.portal)
        return callback(new Error('globals.json does not contain a "portal" property.'));
    if (!globals.portal.authMethods)
        return callback(new Error('globals.json, property portal, does not contain an "authMethods" array.'));
    wicked.apiGet('/auth-servers/default', function (err, defaultAuthServer) {
        if (err)
            return callback(err);

        // Retrieve the URI on Kong the Auth Server resides on
        if (!defaultAuthServer.config)
            return callback(new Error('default auth server does not have a config property.'));
        if (!defaultAuthServer.config.api)
            return callback(new Error('default auth server does not have a config.api property.'));
        if (!defaultAuthServer.config.api.uris)
            return callback(new Error('default auth server does not have a config.api.uris property.'));
        const authServerUri = defaultAuthServer.config.api.uris[0];
        let apiUrl = wicked.getExternalApiUrl();
        if (apiUrl.endsWith('/'))
            apiUrl = apiUrl.substring(0, apiUrl.length - 1);
        const authServerUrl = `${apiUrl}${authServerUri}`;

        // Now match the auth methods of the auth server with the desired auth methods for
        // the portal-api.
        const authMethods = [];
        for (let i = 0; i < globals.portal.authMethods.length; ++i) {
            const wantedAuthMethod = globals.portal.authMethods[i];
            if (wantedAuthMethod.indexOf(':') < 0)
                return callback(new Error(`wanted auth method ${wantedAuthMethod} does not have correct syntax "authserver:methodname", e.g. "default:local"`));
            const tmp = wantedAuthMethod.split(':');
            const authServer = tmp[0];
            const authMethodName = tmp[1];
            if (authServer !== 'default')
                return callback(new Error(`currently, only default server auth methods are supported for portal login: ${wantedAuthMethod}`));
            const defaultAuthMethod = defaultAuthServer.authMethods.find(am => am.name === authMethodName);
            if (!defaultAuthMethod)
                return callback(new Error(`unknown/unsupported auth method ${wantedAuthMethod}`));
            const templateUrl = function (url) {
                return mustache.render(url, {
                    name: authMethodName,
                    api: 'portal-api'
                });
            };

            // Template the URLs
            const config = defaultAuthMethod.config;
            debug('Found a valid auth config:');
            debug(config);
            if (!config)
                return callback(new Error(`Auth method ${wantedAuthMethod} does not have a config property.`));
            if (config.authorizeEndpoint)
                config.authorizeEndpoint = templateUrl(config.authorizeEndpoint);
            else
                return callback(new Error(`Auth method ${wantedAuthMethod} does not have an authorizeEndpoint.`));
            if (config.tokenEndpoint)
                config.tokenEndpoint = templateUrl(config.tokenEndpoint);
            else
                return callback(new Error(`Auth method ${wantedAuthMethod} does not have a tokenEndpoiunt.`));
            if (config.profileEndpoint)
                config.profileEndpoint = templateUrl(config.profileEndpoint);
            else
                return callback(new Error(`Auth method ${wantedAuthMethod} does not have a profileEndpoiunt.`));

            authMethods.push(defaultAuthMethod);
        }
        if (authMethods.length === 0)
            return callback(new Error('no configured or no valid auth methods on globals.json'));
        return callback(null, {
            authMethods: authMethods,
            authServerUrl: authServerUrl
        });
    });
}

async.series({
    init: callback => wicked.initialize(wickedOptions, callback),
    initMachineUser: callback => wicked.initMachineUser('portal', callback),
    registerApp: callback => registerApplicationAndSubscribe(callback),
    authConfig: callback => configureAuthServer(callback)
}, function (err, results) {
    if (err) {
        console.error(err);
        throw Error('Could not initialize portal. See above error.');
    }

    let apiUrl = wicked.getExternalApiUrl();
    if (!apiUrl.endsWith('/')) // Add trailing slash
        apiUrl = apiUrl + '/';
    apiUrl = apiUrl + 'api/v1';

    app.set('api_url', apiUrl);

    debug('API is responding. Finishing initialization.');
    app.initState = 'Finishing initialization...';

    portalGlobals.glob = wicked.getGlobals();

    app.portalGlobals = wicked.getGlobals();
    app.portalGlobals.buildDate = getBuildDate();

    app.authConfig = results.authConfig;
    debug('Configured Portal Auth Methods:');
    debug(JSON.stringify(app.authConfig.authMethods));
    debug('Auth Server URL:');
    debug(app.authConfig.authServerUrl);
    app.clientCredentials = results.registerApp;
    debug('Portal Client Credentials:');
    debug(JSON.stringify(results.registerApp));

    app.initialize(function () {
        app.initialized = true;
        app.initState = 'Initialized';
    });
});

function getBuildDate() {
    debug('getBuildDate()');
    const buildDatePath = path.join(__dirname, '..', 'build_date');
    debug('Looking for build date file at: ' + buildDatePath);
    if (!fs.existsSync(buildDatePath))
        return "(no build date found)";
    return fs.readFileSync(buildDatePath, 'utf8');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
