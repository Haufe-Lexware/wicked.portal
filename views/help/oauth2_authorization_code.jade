extends help_layout

block help_content
  +helpItem('introduction', 'Introduction')

  -var apiUrl = `${glob.network.schema}://${glob.network.apiHost}`
  -var authUrl = `${apiUrl}/auth/`

  p.
    The Authorization Code Grant is the most common authorization flow in OAuth2. It is a three-legged
    process which can be used for best security with backends which support keeping client credentials
    (client IDs and secrets) confidential.

  p.
    The flow works like this in short words:

  ol
    li.
      The application which needs access to an API redirects the user agent (usually the browser) to
      the authorization page of the Authorization Server.
    li.
      The Authorization Server verifies the identity of the end user (by whichever suitable means),
      checks the client ID of the calling application, and if everything is fine, issues a so-called
      "Authorization Code".
    li.
      The Authorization Server redirects (302) back to the calling application, giving the authorization
      code back as a query parameter (<code>?code=(authorization code)</code>).
    li.
      The application now uses the authorization code together with its client credentials (id and secret)
      to retrieve an actual access and refresh token.
    li.
      The application can now use the API with the returned access token.

  +helpItem('get_auth_code', 'Getting an Authorization Code')

  p.
    The calling application must redirect to the correct Authorization Server <code>/authorize</code> end point.
    The URL of this endpoint depends on the authentication method, and on the API. The URL is displayed
    for each supported Authentication Method at the top of each API page.

  pre.
    #{authUrl}<b style="color:#0a0">(auth method id)</b>/api/<b style="color:#0a0">(api id)</b>/authorize?client_id=<b style="color:#0a0">(your client id)</b>&amp;redirect_uri=<b style="color:#0a0">(redirect URI of your application)</b>&amp;response_type=code&amp;scope=<b style="color:#0a0">(space separated list of scopes)</b>

  p.
    All parameteters except the scope (depending on the API) are mandatory. The correct URL for valid combinations
    of API and Authentication Method can be seen on the API page.

  p.
    Note the use of <code>response_type=code</code>, as opposed to <code>response_type=token</code> for the Implicit Grant.

  p.
    The Authorization Server will now verify the user's identity, and also check whether the application is either
    implicitly (because it is a <a href="/help/trusted">trusted application/subscription</a>), or explicitly
    allowed to access the API on behalf of the user. In case the user has not yet consented to the application accessing
    the API on behalf of the user, wicked will ask the user to grant access to the application, so that it can access
    the API on behalf of the user.

  p.
    If the end user's identity could be verified, the Authorization Server will craft an authorization code which
    is passed back to your application with a <code>302</code> redirect, giving the authorization code as a 
    query parameter:

  pre.
    http://your.application.com/oauth2/callback?code=<b style="color:#0a0">(authorization code)</b>

  +helpItem('get_access_token', 'Getting an Access Token')

  p.
    This authorization code can now be used by your application, which has to call the Token endpoint, passing
    the authorization code, and the application's client credentials, to create an access token (and a refresh token).
    An example request using <code>curl</code> would look as follows:

  pre.
    curl -X POST -H 'Content-Type: application/json' -d '{"grant_type=authorization_code","client_id":"<b style="color:#0a0">(your client id)</b>","client_secret":"<b style="color:#0a0">(your client secret)</b>","code":"<b style="color:#0a0">(authorization code)</b>"}' #{authUrl}<b style="color:#0a0">(auth method id)</b>/api/<b style="color:#0a0">(api id)</b>/token

  p.
    In case of a success, the token endpoint returns a JSON structure which contains an access token and a refresh token:

  pre.
    {
      "access_token": "<b style="color:#0a0">(access token)</b>",
      "refresh_token": "<b style="color:#0a0">(refresh token)</b>",
      "token_type": "bearer",
      "expires_in": 3600
    }

  p.
    The token expiration depends on the API configuration and can vary between APIs.

  +helpItem('accessing', 'Accessing the API')

  p.
    With the returned access token, you may now access the API using the token as a bearer token:

  pre.
    curl -H 'Authorization: Bearer <b style="color:#0a0">(access token)</b>' #{apiUrl}/<b style="color:#0a0">(api endpoint)</b>

  p.
    The actual API endpoint is also displayed on the API's page.

  +helpItem('refresh', 'Refreshing the Access Token')

  p.
    Your application can refresh the access token using a specific call to the same <code>/token</code> end point
    as before. Using curl syntax, the call will look like this:

  pre.
    curl -X POST -H 'Content-Type: application/json' -d '{"grant_type=refresh_token","client_id":"<b style="color:#0a0">(your client id)</b>","client_secret":"<b style="color:#0a0">(your client secret)</b>","refresh_token":"<b style="color:#0a0">(refresh token)</b>"}' #{authUrl}<b style="color:#0a0">(auth method id)</b>/api/<b style="color:#0a0">(api id)</b>/token

  p.
    If successful, the Authorization Server will return a new access token and a new refresh token.

  p.
    <b>Important:</b> After refreshing the access token using the refresh token, the refresh token which was
    used for this, is <b>no longer valid</b>. You must then use the new refresh token.
